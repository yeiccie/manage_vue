/// <reference types="@vuemap/amap-jsapi-types" />
import Marker from './Marker.vue';
import type { Plugin } from "vue";
export declare const ElAmapMarker: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        position: {
            type: (ArrayConstructor | ObjectConstructor)[];
            required: true;
        };
        icon: {
            type: (StringConstructor | ObjectConstructor)[];
        };
        content: {
            type: (StringConstructor | ObjectConstructor | {
                new (): HTMLElement;
                prototype: HTMLElement;
            })[];
        };
        title: {
            type: StringConstructor;
        };
        offset: {
            type: (ArrayConstructor | ObjectConstructor)[];
        };
        anchor: {
            type: (StringConstructor | ArrayConstructor)[];
        };
        angle: {
            type: NumberConstructor;
        };
        clickable: {
            type: BooleanConstructor;
            default: boolean;
        };
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        bubble: {
            type: BooleanConstructor;
            default: boolean;
        };
        zooms: {
            type: ArrayConstructor;
        };
        cursor: {
            type: StringConstructor;
        };
        topWhenClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: ObjectConstructor;
        };
        extData: null;
        moveOptions: {
            type: import("vue").PropType<import("./props").MarkerMoveOptions>;
            default: () => null;
        };
    } & {
        visible: import("../../..").IPropOptions<boolean>;
        zIndex: import("../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
        extraOptions: import("../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
        "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    }, {
        props: import("@vue/shared").LooseRequired<{
            readonly position: unknown[] | Record<string, any>;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly bubble: boolean;
            readonly topWhenClick: boolean;
            readonly moveOptions: import("./props").MarkerMoveOptions;
            readonly visible?: boolean | undefined;
            readonly zIndex?: number | undefined;
            readonly reEventWhenUpdate?: boolean | undefined;
            readonly extraOptions?: any;
            readonly zooms?: unknown[] | undefined;
            readonly offset?: unknown[] | Record<string, any> | undefined;
            readonly content?: string | Record<string, any> | HTMLElement | undefined;
            readonly anchor?: string | unknown[] | undefined;
            readonly cursor?: string | undefined;
            readonly title?: string | undefined;
            readonly extData?: any;
            readonly icon?: string | Record<string, any> | undefined;
            readonly angle?: number | undefined;
            readonly label?: Record<string, any> | undefined;
            readonly onInit?: ((...args: any[]) => any) | undefined;
            readonly "onUpdate:position"?: ((...args: any[]) => any) | undefined;
        } & {}>;
        emits: (event: "init" | "update:position", ...args: any[]) => void;
        tempId: string;
        divId: import("vue").Ref<string>;
        $amapComponent: AMap.Marker;
        withSlot: boolean;
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        $$getInstance: () => AMap.Marker;
        parentInstance: import("../../..").IProvideType | undefined;
        bindModelEvents: () => void;
        emitPosition: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("init" | "update:position")[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        position: {
            type: (ArrayConstructor | ObjectConstructor)[];
            required: true;
        };
        icon: {
            type: (StringConstructor | ObjectConstructor)[];
        };
        content: {
            type: (StringConstructor | ObjectConstructor | {
                new (): HTMLElement;
                prototype: HTMLElement;
            })[];
        };
        title: {
            type: StringConstructor;
        };
        offset: {
            type: (ArrayConstructor | ObjectConstructor)[];
        };
        anchor: {
            type: (StringConstructor | ArrayConstructor)[];
        };
        angle: {
            type: NumberConstructor;
        };
        clickable: {
            type: BooleanConstructor;
            default: boolean;
        };
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        bubble: {
            type: BooleanConstructor;
            default: boolean;
        };
        zooms: {
            type: ArrayConstructor;
        };
        cursor: {
            type: StringConstructor;
        };
        topWhenClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: ObjectConstructor;
        };
        extData: null;
        moveOptions: {
            type: import("vue").PropType<import("./props").MarkerMoveOptions>;
            default: () => null;
        };
    } & {
        visible: import("../../..").IPropOptions<boolean>;
        zIndex: import("../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
        extraOptions: import("../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
        "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    }, {
        clickable: boolean;
        draggable: boolean;
        bubble: boolean;
        topWhenClick: boolean;
        moveOptions: import("./props").MarkerMoveOptions;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        position: {
            type: (ArrayConstructor | ObjectConstructor)[];
            required: true;
        };
        icon: {
            type: (StringConstructor | ObjectConstructor)[];
        };
        content: {
            type: (StringConstructor | ObjectConstructor | {
                new (): HTMLElement;
                prototype: HTMLElement;
            })[];
        };
        title: {
            type: StringConstructor;
        };
        offset: {
            type: (ArrayConstructor | ObjectConstructor)[];
        };
        anchor: {
            type: (StringConstructor | ArrayConstructor)[];
        };
        angle: {
            type: NumberConstructor;
        };
        clickable: {
            type: BooleanConstructor;
            default: boolean;
        };
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        bubble: {
            type: BooleanConstructor;
            default: boolean;
        };
        zooms: {
            type: ArrayConstructor;
        };
        cursor: {
            type: StringConstructor;
        };
        topWhenClick: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: ObjectConstructor;
        };
        extData: null;
        moveOptions: {
            type: import("vue").PropType<import("./props").MarkerMoveOptions>;
            default: () => null;
        };
    } & {
        visible: import("../../..").IPropOptions<boolean>;
        zIndex: import("../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
        extraOptions: import("../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
        "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    }, {
        props: import("@vue/shared").LooseRequired<{
            readonly position: unknown[] | Record<string, any>;
            readonly clickable: boolean;
            readonly draggable: boolean;
            readonly bubble: boolean;
            readonly topWhenClick: boolean;
            readonly moveOptions: import("./props").MarkerMoveOptions;
            readonly visible?: boolean | undefined;
            readonly zIndex?: number | undefined;
            readonly reEventWhenUpdate?: boolean | undefined;
            readonly extraOptions?: any;
            readonly zooms?: unknown[] | undefined;
            readonly offset?: unknown[] | Record<string, any> | undefined;
            readonly content?: string | Record<string, any> | HTMLElement | undefined;
            readonly anchor?: string | unknown[] | undefined;
            readonly cursor?: string | undefined;
            readonly title?: string | undefined;
            readonly extData?: any;
            readonly icon?: string | Record<string, any> | undefined;
            readonly angle?: number | undefined;
            readonly label?: Record<string, any> | undefined;
            readonly onInit?: ((...args: any[]) => any) | undefined;
            readonly "onUpdate:position"?: ((...args: any[]) => any) | undefined;
        } & {}>;
        emits: (event: "init" | "update:position", ...args: any[]) => void;
        tempId: string;
        divId: import("vue").Ref<string>;
        $amapComponent: AMap.Marker;
        withSlot: boolean;
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        $$getInstance: () => AMap.Marker;
        parentInstance: import("../../..").IProvideType | undefined;
        bindModelEvents: () => void;
        emitPosition: () => void;
    }, {}, {}, {}, {
        clickable: boolean;
        draggable: boolean;
        bubble: boolean;
        topWhenClick: boolean;
        moveOptions: import("./props").MarkerMoveOptions;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    position: {
        type: (ArrayConstructor | ObjectConstructor)[];
        required: true;
    };
    icon: {
        type: (StringConstructor | ObjectConstructor)[];
    };
    content: {
        type: (StringConstructor | ObjectConstructor | {
            new (): HTMLElement;
            prototype: HTMLElement;
        })[];
    };
    title: {
        type: StringConstructor;
    };
    offset: {
        type: (ArrayConstructor | ObjectConstructor)[];
    };
    anchor: {
        type: (StringConstructor | ArrayConstructor)[];
    };
    angle: {
        type: NumberConstructor;
    };
    clickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    bubble: {
        type: BooleanConstructor;
        default: boolean;
    };
    zooms: {
        type: ArrayConstructor;
    };
    cursor: {
        type: StringConstructor;
    };
    topWhenClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: ObjectConstructor;
    };
    extData: null;
    moveOptions: {
        type: import("vue").PropType<import("./props").MarkerMoveOptions>;
        default: () => null;
    };
} & {
    visible: import("../../..").IPropOptions<boolean>;
    zIndex: import("../../..").IPropOptions<number>;
    reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
    extraOptions: import("../../..").IPropOptions<any>;
}>> & {
    onInit?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
}, {
    props: import("@vue/shared").LooseRequired<{
        readonly position: unknown[] | Record<string, any>;
        readonly clickable: boolean;
        readonly draggable: boolean;
        readonly bubble: boolean;
        readonly topWhenClick: boolean;
        readonly moveOptions: import("./props").MarkerMoveOptions;
        readonly visible?: boolean | undefined;
        readonly zIndex?: number | undefined;
        readonly reEventWhenUpdate?: boolean | undefined;
        readonly extraOptions?: any;
        readonly zooms?: unknown[] | undefined;
        readonly offset?: unknown[] | Record<string, any> | undefined;
        readonly content?: string | Record<string, any> | HTMLElement | undefined;
        readonly anchor?: string | unknown[] | undefined;
        readonly cursor?: string | undefined;
        readonly title?: string | undefined;
        readonly extData?: any;
        readonly icon?: string | Record<string, any> | undefined;
        readonly angle?: number | undefined;
        readonly label?: Record<string, any> | undefined;
        readonly onInit?: ((...args: any[]) => any) | undefined;
        readonly "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    } & {}>;
    emits: (event: "init" | "update:position", ...args: any[]) => void;
    tempId: string;
    divId: import("vue").Ref<string>;
    $amapComponent: AMap.Marker;
    withSlot: boolean;
    $slots: Readonly<{
        [name: string]: import("vue").Slot<any> | undefined;
    }>;
    $$getInstance: () => AMap.Marker;
    parentInstance: import("../../..").IProvideType | undefined;
    bindModelEvents: () => void;
    emitPosition: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("init" | "update:position")[], "init" | "update:position", {
    clickable: boolean;
    draggable: boolean;
    bubble: boolean;
    topWhenClick: boolean;
    moveOptions: import("./props").MarkerMoveOptions;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin<any[]>;
export default ElAmapMarker;
export type { MarkerMoveOptions } from './Marker.vue';
export declare type ElAmapMarkerInstance = InstanceType<typeof Marker>;
