import type { PropType } from "vue";
export interface MarkerMoveOptions {
    duration?: number;
    easing?: (passedTime: number) => number;
    autoRotation?: boolean;
}
export declare const propsTypes: {
    position: {
        type: (ArrayConstructor | ObjectConstructor)[];
        required: true;
    };
    icon: {
        type: (StringConstructor | ObjectConstructor)[];
    };
    content: {
        type: (StringConstructor | ObjectConstructor | {
            new (): HTMLElement;
            prototype: HTMLElement;
        })[];
    };
    title: {
        type: StringConstructor;
    };
    offset: {
        type: (ArrayConstructor | ObjectConstructor)[];
    };
    anchor: {
        type: (StringConstructor | ArrayConstructor)[];
    };
    angle: {
        type: NumberConstructor;
    };
    clickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    bubble: {
        type: BooleanConstructor;
        default: boolean;
    };
    zooms: {
        type: ArrayConstructor;
    };
    cursor: {
        type: StringConstructor;
    };
    topWhenClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: ObjectConstructor;
    };
    extData: null;
    moveOptions: {
        type: PropType<MarkerMoveOptions>;
        default: () => null;
    };
} & {
    visible: import("../../../utils/buildHelper").IPropOptions<boolean>;
    zIndex: import("../../../utils/buildHelper").IPropOptions<number>;
    reEventWhenUpdate: import("../../../utils/buildHelper").IPropOptions<boolean>;
    extraOptions: import("../../../utils/buildHelper").IPropOptions<any>;
};
