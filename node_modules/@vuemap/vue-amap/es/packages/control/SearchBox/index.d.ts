/// <reference types="@vuemap/amap-jsapi-types" />
import type { Plugin } from "vue";
export declare const ElAmapSearchBox: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        type: {
            type: StringConstructor;
        };
        city: {
            type: StringConstructor;
        };
        datatype: {
            type: StringConstructor;
        };
        citylimit: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputId: {
            type: StringConstructor;
        };
        inputCustom: {
            type: BooleanConstructor;
            default: boolean;
        };
        outputId: {
            type: StringConstructor;
        };
        outPutDirAuto: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeResultOnScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
        lang: {
            type: StringConstructor;
        };
        placeholder: {
            type: StringConstructor;
        };
        debounce: {
            type: NumberConstructor;
            default: number;
        };
    } & {
        visible: import("../../..").IPropOptions<boolean>;
        zIndex: import("../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
        extraOptions: import("../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        props: import("@vue/shared").LooseRequired<{
            readonly citylimit: boolean;
            readonly inputCustom: boolean;
            readonly outPutDirAuto: boolean;
            readonly closeResultOnScroll: boolean;
            readonly debounce: number;
            readonly visible?: boolean | undefined;
            readonly zIndex?: number | undefined;
            readonly reEventWhenUpdate?: boolean | undefined;
            readonly extraOptions?: any;
            readonly type?: string | undefined;
            readonly city?: string | undefined;
            readonly datatype?: string | undefined;
            readonly inputId?: string | undefined;
            readonly outputId?: string | undefined;
            readonly lang?: string | undefined;
            readonly placeholder?: string | undefined;
            readonly onInit?: ((...args: any[]) => any) | undefined;
        } & {}>;
        emits: (event: "init", ...args: any[]) => void;
        saveInputId: import("vue").Ref<string>;
        saveVisible: import("vue").Ref<boolean>;
        $amapComponent: AMap.Autocomplete;
        preInput: any;
        $$getInstance: () => AMap.Autocomplete;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        type: {
            type: StringConstructor;
        };
        city: {
            type: StringConstructor;
        };
        datatype: {
            type: StringConstructor;
        };
        citylimit: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputId: {
            type: StringConstructor;
        };
        inputCustom: {
            type: BooleanConstructor;
            default: boolean;
        };
        outputId: {
            type: StringConstructor;
        };
        outPutDirAuto: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeResultOnScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
        lang: {
            type: StringConstructor;
        };
        placeholder: {
            type: StringConstructor;
        };
        debounce: {
            type: NumberConstructor;
            default: number;
        };
    } & {
        visible: import("../../..").IPropOptions<boolean>;
        zIndex: import("../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
        extraOptions: import("../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        citylimit: boolean;
        inputCustom: boolean;
        outPutDirAuto: boolean;
        closeResultOnScroll: boolean;
        debounce: number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        type: {
            type: StringConstructor;
        };
        city: {
            type: StringConstructor;
        };
        datatype: {
            type: StringConstructor;
        };
        citylimit: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputId: {
            type: StringConstructor;
        };
        inputCustom: {
            type: BooleanConstructor;
            default: boolean;
        };
        outputId: {
            type: StringConstructor;
        };
        outPutDirAuto: {
            type: BooleanConstructor;
            default: boolean;
        };
        closeResultOnScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
        lang: {
            type: StringConstructor;
        };
        placeholder: {
            type: StringConstructor;
        };
        debounce: {
            type: NumberConstructor;
            default: number;
        };
    } & {
        visible: import("../../..").IPropOptions<boolean>;
        zIndex: import("../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
        extraOptions: import("../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        props: import("@vue/shared").LooseRequired<{
            readonly citylimit: boolean;
            readonly inputCustom: boolean;
            readonly outPutDirAuto: boolean;
            readonly closeResultOnScroll: boolean;
            readonly debounce: number;
            readonly visible?: boolean | undefined;
            readonly zIndex?: number | undefined;
            readonly reEventWhenUpdate?: boolean | undefined;
            readonly extraOptions?: any;
            readonly type?: string | undefined;
            readonly city?: string | undefined;
            readonly datatype?: string | undefined;
            readonly inputId?: string | undefined;
            readonly outputId?: string | undefined;
            readonly lang?: string | undefined;
            readonly placeholder?: string | undefined;
            readonly onInit?: ((...args: any[]) => any) | undefined;
        } & {}>;
        emits: (event: "init", ...args: any[]) => void;
        saveInputId: import("vue").Ref<string>;
        saveVisible: import("vue").Ref<boolean>;
        $amapComponent: AMap.Autocomplete;
        preInput: any;
        $$getInstance: () => AMap.Autocomplete;
    }, {}, {}, {}, {
        citylimit: boolean;
        inputCustom: boolean;
        outPutDirAuto: boolean;
        closeResultOnScroll: boolean;
        debounce: number;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: StringConstructor;
    };
    city: {
        type: StringConstructor;
    };
    datatype: {
        type: StringConstructor;
    };
    citylimit: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputId: {
        type: StringConstructor;
    };
    inputCustom: {
        type: BooleanConstructor;
        default: boolean;
    };
    outputId: {
        type: StringConstructor;
    };
    outPutDirAuto: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeResultOnScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    lang: {
        type: StringConstructor;
    };
    placeholder: {
        type: StringConstructor;
    };
    debounce: {
        type: NumberConstructor;
        default: number;
    };
} & {
    visible: import("../../..").IPropOptions<boolean>;
    zIndex: import("../../..").IPropOptions<number>;
    reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
    extraOptions: import("../../..").IPropOptions<any>;
}>> & {
    onInit?: ((...args: any[]) => any) | undefined;
}, {
    props: import("@vue/shared").LooseRequired<{
        readonly citylimit: boolean;
        readonly inputCustom: boolean;
        readonly outPutDirAuto: boolean;
        readonly closeResultOnScroll: boolean;
        readonly debounce: number;
        readonly visible?: boolean | undefined;
        readonly zIndex?: number | undefined;
        readonly reEventWhenUpdate?: boolean | undefined;
        readonly extraOptions?: any;
        readonly type?: string | undefined;
        readonly city?: string | undefined;
        readonly datatype?: string | undefined;
        readonly inputId?: string | undefined;
        readonly outputId?: string | undefined;
        readonly lang?: string | undefined;
        readonly placeholder?: string | undefined;
        readonly onInit?: ((...args: any[]) => any) | undefined;
    } & {}>;
    emits: (event: "init", ...args: any[]) => void;
    saveInputId: import("vue").Ref<string>;
    saveVisible: import("vue").Ref<boolean>;
    $amapComponent: AMap.Autocomplete;
    preInput: any;
    $$getInstance: () => AMap.Autocomplete;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], "init", {
    citylimit: boolean;
    inputCustom: boolean;
    outPutDirAuto: boolean;
    closeResultOnScroll: boolean;
    debounce: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin<any[]>;
export default ElAmapSearchBox;
export declare type ElAmapSearchBoxInstance = InstanceType<typeof ElAmapSearchBox>;
