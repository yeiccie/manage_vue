/// <reference types="@vuemap/amap-jsapi-types" />
import type { PropType } from 'vue';
export interface TooltipText {
    marker?: string;
    circle?: string;
    rectangle?: string;
    polyline?: string;
    polygon?: string;
    measureArea?: string;
    rule?: string;
    rectZoomIn?: string;
    rectZoomOut?: string;
}
declare const _default: import("vue").DefineComponent<{
    type: {
        type: PropType<"marker" | "circle" | "rectangle" | "polyline" | "polygon" | "measureArea" | "rule" | "rectZoomIn" | "rectZoomOut">;
        required: true;
        default: string;
        validator: (value: string) => boolean;
    };
    drawOptions: {
        type: ObjectConstructor;
        default: () => null;
    };
    autoClear: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    tooltipTextMap: {
        type: PropType<TooltipText>;
        default: () => null;
    };
    textOptions: {
        type: ObjectConstructor;
        default: () => null;
    };
    drawCursor: {
        type: StringConstructor;
        default: string;
    };
} & {
    visible: import("../../../utils/buildHelper").IPropOptions<boolean>;
    zIndex: import("../../../utils/buildHelper").IPropOptions<number>;
    reEventWhenUpdate: import("../../../utils/buildHelper").IPropOptions<boolean>;
    extraOptions: import("../../../utils/buildHelper").IPropOptions<any>;
}, {
    props: import("@vue/shared").LooseRequired<{
        readonly type: "marker" | "circle" | "rectangle" | "polyline" | "polygon" | "measureArea" | "rule" | "rectZoomIn" | "rectZoomOut";
        readonly drawOptions: Record<string, any>;
        readonly autoClear: boolean;
        readonly showTooltip: boolean;
        readonly tooltipTextMap: TooltipText;
        readonly textOptions: Record<string, any>;
        readonly drawCursor: string;
        readonly visible?: boolean | undefined;
        readonly zIndex?: number | undefined;
        readonly reEventWhenUpdate?: boolean | undefined;
        readonly extraOptions?: any;
        readonly onInit?: ((...args: any[]) => any) | undefined;
        readonly onDraw?: ((...args: any[]) => any) | undefined;
    } & {}>;
    emits: (event: "init" | "draw", ...args: any[]) => void;
    $amapComponent: AMap.MouseTool;
    preMapCursor: string;
    tipTexts: {
        marker: string;
        circle: string;
        rectangle: string;
        polyline: string;
        polygon: string;
        measureArea: string;
        rule: string;
        rectZoomIn: string;
        rectZoomOut: string;
    };
    isDrawing: boolean;
    __type: () => void;
    $$getInstance: () => AMap.MouseTool;
    parentInstance: import("../../../mixins").IProvideType | undefined;
    $text: AMap.Text;
    createTooltip: () => void;
    getMousePosition: (e: any) => void;
    setText: (content: string) => void;
    bindEvent: () => void;
    _close: (ifClear?: boolean) => void;
    $$close: (ifClear?: boolean) => void;
    $$open: () => void;
    $$clear: () => void;
    changeMapCursor: () => void;
    revertMapCursor: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("init" | "draw")[], "init" | "draw", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: PropType<"marker" | "circle" | "rectangle" | "polyline" | "polygon" | "measureArea" | "rule" | "rectZoomIn" | "rectZoomOut">;
        required: true;
        default: string;
        validator: (value: string) => boolean;
    };
    drawOptions: {
        type: ObjectConstructor;
        default: () => null;
    };
    autoClear: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    tooltipTextMap: {
        type: PropType<TooltipText>;
        default: () => null;
    };
    textOptions: {
        type: ObjectConstructor;
        default: () => null;
    };
    drawCursor: {
        type: StringConstructor;
        default: string;
    };
} & {
    visible: import("../../../utils/buildHelper").IPropOptions<boolean>;
    zIndex: import("../../../utils/buildHelper").IPropOptions<number>;
    reEventWhenUpdate: import("../../../utils/buildHelper").IPropOptions<boolean>;
    extraOptions: import("../../../utils/buildHelper").IPropOptions<any>;
}>> & {
    onInit?: ((...args: any[]) => any) | undefined;
    onDraw?: ((...args: any[]) => any) | undefined;
}, {
    type: "marker" | "circle" | "rectangle" | "polyline" | "polygon" | "measureArea" | "rule" | "rectZoomIn" | "rectZoomOut";
    drawOptions: Record<string, any>;
    autoClear: boolean;
    showTooltip: boolean;
    tooltipTextMap: TooltipText;
    textOptions: Record<string, any>;
    drawCursor: string;
}, {}>;
export default _default;
