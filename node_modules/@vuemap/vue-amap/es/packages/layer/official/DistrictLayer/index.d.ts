import DistrictLayer from './DistrictLayer.vue';
import type { Plugin } from "vue";
export declare const ElAmapLayerDistrict: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        type: {
            type: import("vue").PropType<"World" | "Country" | "Province">;
            default: string;
            validator: (value: string) => boolean;
        };
        adcode: {
            type: StringConstructor;
        };
        SOC: {
            type: StringConstructor;
        };
        depth: {
            type: NumberConstructor;
        };
        zooms: {
            type: ArrayConstructor;
        };
        opacity: {
            type: NumberConstructor;
        };
        styles: {
            type: ObjectConstructor;
        };
    } & {
        visible: import("../../../..").IPropOptions<boolean>;
        zIndex: import("../../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
        extraOptions: import("../../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        props: import("@vue/shared").LooseRequired<{
            readonly type: "World" | "Country" | "Province";
            readonly visible?: boolean | undefined;
            readonly zIndex?: number | undefined;
            readonly reEventWhenUpdate?: boolean | undefined;
            readonly extraOptions?: any;
            readonly zooms?: unknown[] | undefined;
            readonly opacity?: number | undefined;
            readonly adcode?: string | undefined;
            readonly SOC?: string | undefined;
            readonly depth?: number | undefined;
            readonly styles?: Record<string, any> | undefined;
            readonly onInit?: ((...args: any[]) => any) | undefined;
        } & {}>;
        emits: (event: "init", ...args: any[]) => void;
        $amapComponent: any;
        $$getInstance: () => any;
        parentInstance: import("../../../..").IProvideType | undefined;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        type: {
            type: import("vue").PropType<"World" | "Country" | "Province">;
            default: string;
            validator: (value: string) => boolean;
        };
        adcode: {
            type: StringConstructor;
        };
        SOC: {
            type: StringConstructor;
        };
        depth: {
            type: NumberConstructor;
        };
        zooms: {
            type: ArrayConstructor;
        };
        opacity: {
            type: NumberConstructor;
        };
        styles: {
            type: ObjectConstructor;
        };
    } & {
        visible: import("../../../..").IPropOptions<boolean>;
        zIndex: import("../../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
        extraOptions: import("../../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        type: "World" | "Country" | "Province";
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        type: {
            type: import("vue").PropType<"World" | "Country" | "Province">;
            default: string;
            validator: (value: string) => boolean;
        };
        adcode: {
            type: StringConstructor;
        };
        SOC: {
            type: StringConstructor;
        };
        depth: {
            type: NumberConstructor;
        };
        zooms: {
            type: ArrayConstructor;
        };
        opacity: {
            type: NumberConstructor;
        };
        styles: {
            type: ObjectConstructor;
        };
    } & {
        visible: import("../../../..").IPropOptions<boolean>;
        zIndex: import("../../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
        extraOptions: import("../../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        props: import("@vue/shared").LooseRequired<{
            readonly type: "World" | "Country" | "Province";
            readonly visible?: boolean | undefined;
            readonly zIndex?: number | undefined;
            readonly reEventWhenUpdate?: boolean | undefined;
            readonly extraOptions?: any;
            readonly zooms?: unknown[] | undefined;
            readonly opacity?: number | undefined;
            readonly adcode?: string | undefined;
            readonly SOC?: string | undefined;
            readonly depth?: number | undefined;
            readonly styles?: Record<string, any> | undefined;
            readonly onInit?: ((...args: any[]) => any) | undefined;
        } & {}>;
        emits: (event: "init", ...args: any[]) => void;
        $amapComponent: any;
        $$getInstance: () => any;
        parentInstance: import("../../../..").IProvideType | undefined;
    }, {}, {}, {}, {
        type: "World" | "Country" | "Province";
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: import("vue").PropType<"World" | "Country" | "Province">;
        default: string;
        validator: (value: string) => boolean;
    };
    adcode: {
        type: StringConstructor;
    };
    SOC: {
        type: StringConstructor;
    };
    depth: {
        type: NumberConstructor;
    };
    zooms: {
        type: ArrayConstructor;
    };
    opacity: {
        type: NumberConstructor;
    };
    styles: {
        type: ObjectConstructor;
    };
} & {
    visible: import("../../../..").IPropOptions<boolean>;
    zIndex: import("../../../..").IPropOptions<number>;
    reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
    extraOptions: import("../../../..").IPropOptions<any>;
}>> & {
    onInit?: ((...args: any[]) => any) | undefined;
}, {
    props: import("@vue/shared").LooseRequired<{
        readonly type: "World" | "Country" | "Province";
        readonly visible?: boolean | undefined;
        readonly zIndex?: number | undefined;
        readonly reEventWhenUpdate?: boolean | undefined;
        readonly extraOptions?: any;
        readonly zooms?: unknown[] | undefined;
        readonly opacity?: number | undefined;
        readonly adcode?: string | undefined;
        readonly SOC?: string | undefined;
        readonly depth?: number | undefined;
        readonly styles?: Record<string, any> | undefined;
        readonly onInit?: ((...args: any[]) => any) | undefined;
    } & {}>;
    emits: (event: "init", ...args: any[]) => void;
    $amapComponent: any;
    $$getInstance: () => any;
    parentInstance: import("../../../..").IProvideType | undefined;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], "init", {
    type: "World" | "Country" | "Province";
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin<any[]>;
export default ElAmapLayerDistrict;
export declare type ElAmapLayerDistrictInstance = InstanceType<typeof DistrictLayer>;
