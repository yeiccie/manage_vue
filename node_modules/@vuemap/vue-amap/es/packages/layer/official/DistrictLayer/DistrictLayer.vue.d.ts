import type { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    type: {
        type: PropType<"World" | "Country" | "Province">;
        default: string;
        validator: (value: string) => boolean;
    };
    adcode: {
        type: StringConstructor;
    };
    SOC: {
        type: StringConstructor;
    };
    depth: {
        type: NumberConstructor;
    };
    zooms: {
        type: ArrayConstructor;
    };
    opacity: {
        type: NumberConstructor;
    };
    styles: {
        type: ObjectConstructor;
    };
} & {
    visible: import("../../../../utils/buildHelper").IPropOptions<boolean>;
    zIndex: import("../../../../utils/buildHelper").IPropOptions<number>;
    reEventWhenUpdate: import("../../../../utils/buildHelper").IPropOptions<boolean>;
    extraOptions: import("../../../../utils/buildHelper").IPropOptions<any>;
}, {
    props: import("@vue/shared").LooseRequired<{
        readonly type: "World" | "Country" | "Province";
        readonly visible?: boolean | undefined;
        readonly zIndex?: number | undefined;
        readonly reEventWhenUpdate?: boolean | undefined;
        readonly extraOptions?: any;
        readonly zooms?: unknown[] | undefined;
        readonly opacity?: number | undefined;
        readonly adcode?: string | undefined;
        readonly SOC?: string | undefined;
        readonly depth?: number | undefined;
        readonly styles?: Record<string, any> | undefined;
        readonly onInit?: ((...args: any[]) => any) | undefined;
    } & {}>;
    emits: (event: "init", ...args: any[]) => void;
    $amapComponent: any;
    $$getInstance: () => any;
    parentInstance: import("../../../../mixins").IProvideType | undefined;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], "init", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: PropType<"World" | "Country" | "Province">;
        default: string;
        validator: (value: string) => boolean;
    };
    adcode: {
        type: StringConstructor;
    };
    SOC: {
        type: StringConstructor;
    };
    depth: {
        type: NumberConstructor;
    };
    zooms: {
        type: ArrayConstructor;
    };
    opacity: {
        type: NumberConstructor;
    };
    styles: {
        type: ObjectConstructor;
    };
} & {
    visible: import("../../../../utils/buildHelper").IPropOptions<boolean>;
    zIndex: import("../../../../utils/buildHelper").IPropOptions<number>;
    reEventWhenUpdate: import("../../../../utils/buildHelper").IPropOptions<boolean>;
    extraOptions: import("../../../../utils/buildHelper").IPropOptions<any>;
}>> & {
    onInit?: ((...args: any[]) => any) | undefined;
}, {
    type: "World" | "Country" | "Province";
}, {}>;
export default _default;
