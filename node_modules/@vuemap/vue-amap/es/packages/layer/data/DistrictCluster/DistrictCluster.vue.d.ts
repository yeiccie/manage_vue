import './addProcess';
import { DistrictCluster } from "@vuemap/district-cluster";
import type { PropType } from 'vue';
import type { RenderOptions } from '@vuemap/district-cluster';
declare type GetPosition = (dataItem: any, dataIndex: number) => [number, number];
declare const _default: import("vue").DefineComponent<{
    data: {
        required: true;
        type: ArrayConstructor;
    };
    getPosition: {
        type: PropType<GetPosition>;
    };
    autoSetFitView: {
        type: BooleanConstructor;
        default: boolean;
    };
    topAdcodes: {
        type: PropType<number[]>;
    };
    excludedAdcodes: {
        type: PropType<number[]>;
    };
    renderOptions: {
        type: PropType<RenderOptions>;
    };
} & {
    visible: import("../../../../utils/buildHelper").IPropOptions<boolean>;
    zIndex: import("../../../../utils/buildHelper").IPropOptions<number>;
    reEventWhenUpdate: import("../../../../utils/buildHelper").IPropOptions<boolean>;
    extraOptions: import("../../../../utils/buildHelper").IPropOptions<any>;
}, {
    emits: (event: "init", ...args: any[]) => void;
    $amapComponent: DistrictCluster;
    $$getInstance: () => DistrictCluster;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], "init", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    data: {
        required: true;
        type: ArrayConstructor;
    };
    getPosition: {
        type: PropType<GetPosition>;
    };
    autoSetFitView: {
        type: BooleanConstructor;
        default: boolean;
    };
    topAdcodes: {
        type: PropType<number[]>;
    };
    excludedAdcodes: {
        type: PropType<number[]>;
    };
    renderOptions: {
        type: PropType<RenderOptions>;
    };
} & {
    visible: import("../../../../utils/buildHelper").IPropOptions<boolean>;
    zIndex: import("../../../../utils/buildHelper").IPropOptions<number>;
    reEventWhenUpdate: import("../../../../utils/buildHelper").IPropOptions<boolean>;
    extraOptions: import("../../../../utils/buildHelper").IPropOptions<any>;
}>> & {
    onInit?: ((...args: any[]) => any) | undefined;
}, {
    autoSetFitView: boolean;
}, {}>;
export default _default;
