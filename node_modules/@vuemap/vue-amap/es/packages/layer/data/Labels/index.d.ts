/// <reference types="@vuemap/amap-jsapi-types" />
import Labels from './Labels.vue';
import type { Plugin } from "vue";
export declare const ElAmapLayerLabels: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        zooms: {
            type: ArrayConstructor;
        };
        opacity: {
            type: NumberConstructor;
        };
        collision: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowCollision: {
            type: BooleanConstructor;
            default: boolean;
        };
    } & {
        visible: import("../../../..").IPropOptions<boolean>;
        zIndex: import("../../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
        extraOptions: import("../../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        needInitComponents: import("../../../..").TRegisterFn[];
        provideData: import("../../../..").IProvideType;
        emits: (event: "init", ...args: any[]) => void;
        $amapComponent: AMap.LabelsLayer;
        $$getInstance: () => AMap.LabelsLayer;
        parentInstance: import("../../../..").IProvideType | undefined;
        $$add: (markers: AMap.LabelMarker | AMap.LabelMarker[]) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        zooms: {
            type: ArrayConstructor;
        };
        opacity: {
            type: NumberConstructor;
        };
        collision: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowCollision: {
            type: BooleanConstructor;
            default: boolean;
        };
    } & {
        visible: import("../../../..").IPropOptions<boolean>;
        zIndex: import("../../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
        extraOptions: import("../../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        collision: boolean;
        allowCollision: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        zooms: {
            type: ArrayConstructor;
        };
        opacity: {
            type: NumberConstructor;
        };
        collision: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowCollision: {
            type: BooleanConstructor;
            default: boolean;
        };
    } & {
        visible: import("../../../..").IPropOptions<boolean>;
        zIndex: import("../../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
        extraOptions: import("../../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        needInitComponents: import("../../../..").TRegisterFn[];
        provideData: import("../../../..").IProvideType;
        emits: (event: "init", ...args: any[]) => void;
        $amapComponent: AMap.LabelsLayer;
        $$getInstance: () => AMap.LabelsLayer;
        parentInstance: import("../../../..").IProvideType | undefined;
        $$add: (markers: AMap.LabelMarker | AMap.LabelMarker[]) => void;
    }, {}, {}, {}, {
        collision: boolean;
        allowCollision: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    zooms: {
        type: ArrayConstructor;
    };
    opacity: {
        type: NumberConstructor;
    };
    collision: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowCollision: {
        type: BooleanConstructor;
        default: boolean;
    };
} & {
    visible: import("../../../..").IPropOptions<boolean>;
    zIndex: import("../../../..").IPropOptions<number>;
    reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
    extraOptions: import("../../../..").IPropOptions<any>;
}>> & {
    onInit?: ((...args: any[]) => any) | undefined;
}, {
    needInitComponents: import("../../../..").TRegisterFn[];
    provideData: import("../../../..").IProvideType;
    emits: (event: "init", ...args: any[]) => void;
    $amapComponent: AMap.LabelsLayer;
    $$getInstance: () => AMap.LabelsLayer;
    parentInstance: import("../../../..").IProvideType | undefined;
    $$add: (markers: AMap.LabelMarker | AMap.LabelMarker[]) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], "init", {
    collision: boolean;
    allowCollision: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin<any[]>;
export default ElAmapLayerLabels;
export declare type ElAmapLayerLabelsInstance = InstanceType<typeof Labels>;
