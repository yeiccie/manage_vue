/// <reference types="@vuemap/amap-jsapi-types" />
import Custom from './Custom.vue';
import type { Plugin } from "vue";
export declare const ElAmapLayerCustom: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        canvas: {
            required: true;
            type: ObjectConstructor;
        };
        render: {
            type: FunctionConstructor;
        };
        zooms: {
            type: ArrayConstructor;
        };
        opacity: {
            type: NumberConstructor;
        };
        alwaysRender: {
            type: BooleanConstructor;
            default: boolean;
        };
    } & {
        visible: import("../../../..").IPropOptions<boolean>;
        zIndex: import("../../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
        extraOptions: import("../../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        emits: (event: "init", ...args: any[]) => void;
        $amapComponent: AMap.CustomLayer;
        $$getInstance: () => AMap.CustomLayer;
        parentInstance: import("../../../..").IProvideType | undefined;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        canvas: {
            required: true;
            type: ObjectConstructor;
        };
        render: {
            type: FunctionConstructor;
        };
        zooms: {
            type: ArrayConstructor;
        };
        opacity: {
            type: NumberConstructor;
        };
        alwaysRender: {
            type: BooleanConstructor;
            default: boolean;
        };
    } & {
        visible: import("../../../..").IPropOptions<boolean>;
        zIndex: import("../../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
        extraOptions: import("../../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        alwaysRender: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        canvas: {
            required: true;
            type: ObjectConstructor;
        };
        render: {
            type: FunctionConstructor;
        };
        zooms: {
            type: ArrayConstructor;
        };
        opacity: {
            type: NumberConstructor;
        };
        alwaysRender: {
            type: BooleanConstructor;
            default: boolean;
        };
    } & {
        visible: import("../../../..").IPropOptions<boolean>;
        zIndex: import("../../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
        extraOptions: import("../../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        emits: (event: "init", ...args: any[]) => void;
        $amapComponent: AMap.CustomLayer;
        $$getInstance: () => AMap.CustomLayer;
        parentInstance: import("../../../..").IProvideType | undefined;
    }, {}, {}, {}, {
        alwaysRender: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    canvas: {
        required: true;
        type: ObjectConstructor;
    };
    render: {
        type: FunctionConstructor;
    };
    zooms: {
        type: ArrayConstructor;
    };
    opacity: {
        type: NumberConstructor;
    };
    alwaysRender: {
        type: BooleanConstructor;
        default: boolean;
    };
} & {
    visible: import("../../../..").IPropOptions<boolean>;
    zIndex: import("../../../..").IPropOptions<number>;
    reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
    extraOptions: import("../../../..").IPropOptions<any>;
}>> & {
    onInit?: ((...args: any[]) => any) | undefined;
}, {
    emits: (event: "init", ...args: any[]) => void;
    $amapComponent: AMap.CustomLayer;
    $$getInstance: () => AMap.CustomLayer;
    parentInstance: import("../../../..").IProvideType | undefined;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], "init", {
    alwaysRender: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin<any[]>;
export default ElAmapLayerCustom;
export declare type ElAmapLayerCustomInstance = InstanceType<typeof Custom>;
