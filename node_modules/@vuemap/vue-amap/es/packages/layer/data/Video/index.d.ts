import Video from './Video.vue';
import type { Plugin } from "vue";
export declare const ElAmapLayerVideo: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        url: {
            required: true;
            type: StringConstructor;
        };
        zooms: {
            type: ArrayConstructor;
        };
        bounds: {
            type: (ArrayConstructor | ObjectConstructor)[];
        };
        opacity: {
            type: NumberConstructor;
        };
    } & {
        visible: import("../../../..").IPropOptions<boolean>;
        zIndex: import("../../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
        extraOptions: import("../../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        emits: (event: "init", ...args: any[]) => void;
        videoRef: import("vue").Ref<HTMLVideoElement | undefined>;
        $amapComponent: import("./VideoLayer").default;
        $$getInstance: () => import("./VideoLayer").default;
        parentInstance: import("../../../..").IProvideType | undefined;
        $$play: () => void;
        $$pause: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        url: {
            required: true;
            type: StringConstructor;
        };
        zooms: {
            type: ArrayConstructor;
        };
        bounds: {
            type: (ArrayConstructor | ObjectConstructor)[];
        };
        opacity: {
            type: NumberConstructor;
        };
    } & {
        visible: import("../../../..").IPropOptions<boolean>;
        zIndex: import("../../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
        extraOptions: import("../../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {}, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        url: {
            required: true;
            type: StringConstructor;
        };
        zooms: {
            type: ArrayConstructor;
        };
        bounds: {
            type: (ArrayConstructor | ObjectConstructor)[];
        };
        opacity: {
            type: NumberConstructor;
        };
    } & {
        visible: import("../../../..").IPropOptions<boolean>;
        zIndex: import("../../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
        extraOptions: import("../../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        emits: (event: "init", ...args: any[]) => void;
        videoRef: import("vue").Ref<HTMLVideoElement | undefined>;
        $amapComponent: import("./VideoLayer").default;
        $$getInstance: () => import("./VideoLayer").default;
        parentInstance: import("../../../..").IProvideType | undefined;
        $$play: () => void;
        $$pause: () => void;
    }, {}, {}, {}, {}>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    url: {
        required: true;
        type: StringConstructor;
    };
    zooms: {
        type: ArrayConstructor;
    };
    bounds: {
        type: (ArrayConstructor | ObjectConstructor)[];
    };
    opacity: {
        type: NumberConstructor;
    };
} & {
    visible: import("../../../..").IPropOptions<boolean>;
    zIndex: import("../../../..").IPropOptions<number>;
    reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
    extraOptions: import("../../../..").IPropOptions<any>;
}>> & {
    onInit?: ((...args: any[]) => any) | undefined;
}, {
    emits: (event: "init", ...args: any[]) => void;
    videoRef: import("vue").Ref<HTMLVideoElement | undefined>;
    $amapComponent: import("./VideoLayer").default;
    $$getInstance: () => import("./VideoLayer").default;
    parentInstance: import("../../../..").IProvideType | undefined;
    $$play: () => void;
    $$pause: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], "init", {}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin<any[]>;
export default ElAmapLayerVideo;
export declare type ElAmapLayerVideoInstance = InstanceType<typeof Video>;
