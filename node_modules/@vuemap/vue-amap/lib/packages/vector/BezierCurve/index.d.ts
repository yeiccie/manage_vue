/// <reference types="@vuemap/amap-jsapi-types" />
import BezierCurve from './BezierCurve.vue';
import type { Plugin } from "vue";
export declare const ElAmapBezierCurve: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        path: {
            type: ArrayConstructor;
            required: true;
        };
        bubble: {
            type: BooleanConstructor;
            default: boolean;
        };
        cursor: {
            type: StringConstructor;
        };
        strokeColor: {
            type: StringConstructor;
        };
        strokeOpacity: {
            type: NumberConstructor;
        };
        strokeWeight: {
            type: NumberConstructor;
        };
        borderWeight: {
            type: NumberConstructor;
        };
        isOutline: {
            type: BooleanConstructor;
            default: boolean;
        };
        outlineColor: {
            type: StringConstructor;
        };
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        extData: {
            type: ObjectConstructor;
            default: () => null;
        };
        strokeStyle: {
            type: import("vue").PropType<"solid" | "dashed">;
            validator: (value: string) => boolean;
        };
        strokeDasharray: {
            type: ArrayConstructor;
        };
        lineJoin: {
            type: import("vue").PropType<"miter" | "round" | "bevel">;
            validator: (value: string) => boolean;
        };
        lineCap: {
            type: import("vue").PropType<"round" | "butt" | "square">;
            validator: (value: string) => boolean;
        };
        geodesic: {
            type: BooleanConstructor;
            default: boolean;
        };
        showDir: {
            type: BooleanConstructor;
            default: boolean;
        };
        editable: {
            type: BooleanConstructor;
            default: boolean;
        };
        editOptions: {
            type: ObjectConstructor;
        };
    } & {
        visible: import("../../..").IPropOptions<boolean>;
        zIndex: import("../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
        extraOptions: import("../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
        "onUpdate:path"?: ((...args: any[]) => any) | undefined;
    }, {
        props: import("@vue/shared").LooseRequired<{
            readonly draggable: boolean;
            readonly bubble: boolean;
            readonly extData: Record<string, any>;
            readonly path: unknown[];
            readonly isOutline: boolean;
            readonly geodesic: boolean;
            readonly showDir: boolean;
            readonly editable: boolean;
            readonly visible?: boolean | undefined;
            readonly zIndex?: number | undefined;
            readonly reEventWhenUpdate?: boolean | undefined;
            readonly extraOptions?: any;
            readonly cursor?: string | undefined;
            readonly strokeColor?: string | undefined;
            readonly strokeOpacity?: number | undefined;
            readonly strokeWeight?: number | undefined;
            readonly borderWeight?: number | undefined;
            readonly outlineColor?: string | undefined;
            readonly strokeStyle?: "solid" | "dashed" | undefined;
            readonly strokeDasharray?: unknown[] | undefined;
            readonly lineJoin?: "miter" | "round" | "bevel" | undefined;
            readonly lineCap?: "round" | "butt" | "square" | undefined;
            readonly editOptions?: Record<string, any> | undefined;
            readonly onInit?: ((...args: any[]) => any) | undefined;
            readonly "onUpdate:path"?: ((...args: any[]) => any) | undefined;
        } & {}>;
        emits: (event: "init" | "update:path", ...args: any[]) => void;
        $amapComponent: AMap.BezierCurve;
        destroying: boolean;
        $$getInstance: () => AMap.BezierCurve;
        parentInstance: import("../../..").IProvideType | undefined;
        resetEditor: import("lodash").DebouncedFunc<() => void>;
        bindModelEvents: () => void;
        emitModel: import("lodash").DebouncedFunc<(target: AMap.BezierCurve) => void>;
        editor: AMap.BezierCurveEditor;
        attrs: {
            [x: string]: unknown;
        };
        createEditor: () => Promise<void>;
        bindEditorModelEvents: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("init" | "update:path")[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        path: {
            type: ArrayConstructor;
            required: true;
        };
        bubble: {
            type: BooleanConstructor;
            default: boolean;
        };
        cursor: {
            type: StringConstructor;
        };
        strokeColor: {
            type: StringConstructor;
        };
        strokeOpacity: {
            type: NumberConstructor;
        };
        strokeWeight: {
            type: NumberConstructor;
        };
        borderWeight: {
            type: NumberConstructor;
        };
        isOutline: {
            type: BooleanConstructor;
            default: boolean;
        };
        outlineColor: {
            type: StringConstructor;
        };
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        extData: {
            type: ObjectConstructor;
            default: () => null;
        };
        strokeStyle: {
            type: import("vue").PropType<"solid" | "dashed">;
            validator: (value: string) => boolean;
        };
        strokeDasharray: {
            type: ArrayConstructor;
        };
        lineJoin: {
            type: import("vue").PropType<"miter" | "round" | "bevel">;
            validator: (value: string) => boolean;
        };
        lineCap: {
            type: import("vue").PropType<"round" | "butt" | "square">;
            validator: (value: string) => boolean;
        };
        geodesic: {
            type: BooleanConstructor;
            default: boolean;
        };
        showDir: {
            type: BooleanConstructor;
            default: boolean;
        };
        editable: {
            type: BooleanConstructor;
            default: boolean;
        };
        editOptions: {
            type: ObjectConstructor;
        };
    } & {
        visible: import("../../..").IPropOptions<boolean>;
        zIndex: import("../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
        extraOptions: import("../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
        "onUpdate:path"?: ((...args: any[]) => any) | undefined;
    }, {
        draggable: boolean;
        bubble: boolean;
        extData: Record<string, any>;
        isOutline: boolean;
        geodesic: boolean;
        showDir: boolean;
        editable: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        path: {
            type: ArrayConstructor;
            required: true;
        };
        bubble: {
            type: BooleanConstructor;
            default: boolean;
        };
        cursor: {
            type: StringConstructor;
        };
        strokeColor: {
            type: StringConstructor;
        };
        strokeOpacity: {
            type: NumberConstructor;
        };
        strokeWeight: {
            type: NumberConstructor;
        };
        borderWeight: {
            type: NumberConstructor;
        };
        isOutline: {
            type: BooleanConstructor;
            default: boolean;
        };
        outlineColor: {
            type: StringConstructor;
        };
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        extData: {
            type: ObjectConstructor;
            default: () => null;
        };
        strokeStyle: {
            type: import("vue").PropType<"solid" | "dashed">;
            validator: (value: string) => boolean;
        };
        strokeDasharray: {
            type: ArrayConstructor;
        };
        lineJoin: {
            type: import("vue").PropType<"miter" | "round" | "bevel">;
            validator: (value: string) => boolean;
        };
        lineCap: {
            type: import("vue").PropType<"round" | "butt" | "square">;
            validator: (value: string) => boolean;
        };
        geodesic: {
            type: BooleanConstructor;
            default: boolean;
        };
        showDir: {
            type: BooleanConstructor;
            default: boolean;
        };
        editable: {
            type: BooleanConstructor;
            default: boolean;
        };
        editOptions: {
            type: ObjectConstructor;
        };
    } & {
        visible: import("../../..").IPropOptions<boolean>;
        zIndex: import("../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
        extraOptions: import("../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
        "onUpdate:path"?: ((...args: any[]) => any) | undefined;
    }, {
        props: import("@vue/shared").LooseRequired<{
            readonly draggable: boolean;
            readonly bubble: boolean;
            readonly extData: Record<string, any>;
            readonly path: unknown[];
            readonly isOutline: boolean;
            readonly geodesic: boolean;
            readonly showDir: boolean;
            readonly editable: boolean;
            readonly visible?: boolean | undefined;
            readonly zIndex?: number | undefined;
            readonly reEventWhenUpdate?: boolean | undefined;
            readonly extraOptions?: any;
            readonly cursor?: string | undefined;
            readonly strokeColor?: string | undefined;
            readonly strokeOpacity?: number | undefined;
            readonly strokeWeight?: number | undefined;
            readonly borderWeight?: number | undefined;
            readonly outlineColor?: string | undefined;
            readonly strokeStyle?: "solid" | "dashed" | undefined;
            readonly strokeDasharray?: unknown[] | undefined;
            readonly lineJoin?: "miter" | "round" | "bevel" | undefined;
            readonly lineCap?: "round" | "butt" | "square" | undefined;
            readonly editOptions?: Record<string, any> | undefined;
            readonly onInit?: ((...args: any[]) => any) | undefined;
            readonly "onUpdate:path"?: ((...args: any[]) => any) | undefined;
        } & {}>;
        emits: (event: "init" | "update:path", ...args: any[]) => void;
        $amapComponent: AMap.BezierCurve;
        destroying: boolean;
        $$getInstance: () => AMap.BezierCurve;
        parentInstance: import("../../..").IProvideType | undefined;
        resetEditor: import("lodash").DebouncedFunc<() => void>;
        bindModelEvents: () => void;
        emitModel: import("lodash").DebouncedFunc<(target: AMap.BezierCurve) => void>;
        editor: AMap.BezierCurveEditor;
        attrs: {
            [x: string]: unknown;
        };
        createEditor: () => Promise<void>;
        bindEditorModelEvents: () => void;
    }, {}, {}, {}, {
        draggable: boolean;
        bubble: boolean;
        extData: Record<string, any>;
        isOutline: boolean;
        geodesic: boolean;
        showDir: boolean;
        editable: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    path: {
        type: ArrayConstructor;
        required: true;
    };
    bubble: {
        type: BooleanConstructor;
        default: boolean;
    };
    cursor: {
        type: StringConstructor;
    };
    strokeColor: {
        type: StringConstructor;
    };
    strokeOpacity: {
        type: NumberConstructor;
    };
    strokeWeight: {
        type: NumberConstructor;
    };
    borderWeight: {
        type: NumberConstructor;
    };
    isOutline: {
        type: BooleanConstructor;
        default: boolean;
    };
    outlineColor: {
        type: StringConstructor;
    };
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    extData: {
        type: ObjectConstructor;
        default: () => null;
    };
    strokeStyle: {
        type: import("vue").PropType<"solid" | "dashed">;
        validator: (value: string) => boolean;
    };
    strokeDasharray: {
        type: ArrayConstructor;
    };
    lineJoin: {
        type: import("vue").PropType<"miter" | "round" | "bevel">;
        validator: (value: string) => boolean;
    };
    lineCap: {
        type: import("vue").PropType<"round" | "butt" | "square">;
        validator: (value: string) => boolean;
    };
    geodesic: {
        type: BooleanConstructor;
        default: boolean;
    };
    showDir: {
        type: BooleanConstructor;
        default: boolean;
    };
    editable: {
        type: BooleanConstructor;
        default: boolean;
    };
    editOptions: {
        type: ObjectConstructor;
    };
} & {
    visible: import("../../..").IPropOptions<boolean>;
    zIndex: import("../../..").IPropOptions<number>;
    reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
    extraOptions: import("../../..").IPropOptions<any>;
}>> & {
    onInit?: ((...args: any[]) => any) | undefined;
    "onUpdate:path"?: ((...args: any[]) => any) | undefined;
}, {
    props: import("@vue/shared").LooseRequired<{
        readonly draggable: boolean;
        readonly bubble: boolean;
        readonly extData: Record<string, any>;
        readonly path: unknown[];
        readonly isOutline: boolean;
        readonly geodesic: boolean;
        readonly showDir: boolean;
        readonly editable: boolean;
        readonly visible?: boolean | undefined;
        readonly zIndex?: number | undefined;
        readonly reEventWhenUpdate?: boolean | undefined;
        readonly extraOptions?: any;
        readonly cursor?: string | undefined;
        readonly strokeColor?: string | undefined;
        readonly strokeOpacity?: number | undefined;
        readonly strokeWeight?: number | undefined;
        readonly borderWeight?: number | undefined;
        readonly outlineColor?: string | undefined;
        readonly strokeStyle?: "solid" | "dashed" | undefined;
        readonly strokeDasharray?: unknown[] | undefined;
        readonly lineJoin?: "miter" | "round" | "bevel" | undefined;
        readonly lineCap?: "round" | "butt" | "square" | undefined;
        readonly editOptions?: Record<string, any> | undefined;
        readonly onInit?: ((...args: any[]) => any) | undefined;
        readonly "onUpdate:path"?: ((...args: any[]) => any) | undefined;
    } & {}>;
    emits: (event: "init" | "update:path", ...args: any[]) => void;
    $amapComponent: AMap.BezierCurve;
    destroying: boolean;
    $$getInstance: () => AMap.BezierCurve;
    parentInstance: import("../../..").IProvideType | undefined;
    resetEditor: import("lodash").DebouncedFunc<() => void>;
    bindModelEvents: () => void;
    emitModel: import("lodash").DebouncedFunc<(target: AMap.BezierCurve) => void>;
    editor: AMap.BezierCurveEditor;
    attrs: {
        [x: string]: unknown;
    };
    createEditor: () => Promise<void>;
    bindEditorModelEvents: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("init" | "update:path")[], "init" | "update:path", {
    draggable: boolean;
    bubble: boolean;
    extData: Record<string, any>;
    isOutline: boolean;
    geodesic: boolean;
    showDir: boolean;
    editable: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin<any[]>;
export default ElAmapBezierCurve;
export declare type ElAmapBezierCurveInstance = InstanceType<typeof BezierCurve>;
