/// <reference types="@vuemap/amap-jsapi-types" />
declare const _default: import("vue").DefineComponent<{
    position: {
        type: (ArrayConstructor | ObjectConstructor)[];
        required: true;
    };
    title: {
        type: StringConstructor;
    };
    offset: {
        type: (ArrayConstructor | ObjectConstructor)[];
    };
    clickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    bubble: {
        type: BooleanConstructor;
        default: boolean;
    };
    zooms: {
        type: ArrayConstructor;
    };
    cursor: {
        type: StringConstructor;
    };
    topWhenClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    zoomStyleMapping: {
        type: ObjectConstructor;
    };
    styles: {
        type: ArrayConstructor;
    };
    extData: {
        type: ObjectConstructor;
        default: () => null;
    };
} & {
    visible: import("../../../utils").IPropOptions<boolean>;
    zIndex: import("../../../utils").IPropOptions<number>;
    reEventWhenUpdate: import("../../../utils").IPropOptions<boolean>;
    extraOptions: import("../../../utils").IPropOptions<any>;
}, {
    emits: (event: "init" | "update:position", ...args: any[]) => void;
    $amapComponent: AMap.ElasticMarker;
    $$getInstance: () => AMap.ElasticMarker;
    parentInstance: import("../../../mixins").IProvideType | undefined;
    bindModelEvents: () => void;
    emitPosition: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("init" | "update:position")[], "init" | "update:position", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    position: {
        type: (ArrayConstructor | ObjectConstructor)[];
        required: true;
    };
    title: {
        type: StringConstructor;
    };
    offset: {
        type: (ArrayConstructor | ObjectConstructor)[];
    };
    clickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    bubble: {
        type: BooleanConstructor;
        default: boolean;
    };
    zooms: {
        type: ArrayConstructor;
    };
    cursor: {
        type: StringConstructor;
    };
    topWhenClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    zoomStyleMapping: {
        type: ObjectConstructor;
    };
    styles: {
        type: ArrayConstructor;
    };
    extData: {
        type: ObjectConstructor;
        default: () => null;
    };
} & {
    visible: import("../../../utils").IPropOptions<boolean>;
    zIndex: import("../../../utils").IPropOptions<number>;
    reEventWhenUpdate: import("../../../utils").IPropOptions<boolean>;
    extraOptions: import("../../../utils").IPropOptions<any>;
}>> & {
    onInit?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
}, {
    clickable: boolean;
    draggable: boolean;
    bubble: boolean;
    topWhenClick: boolean;
    extData: Record<string, any>;
}, {}>;
export default _default;
