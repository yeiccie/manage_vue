/// <reference types="@vuemap/amap-jsapi-types" />
import MarkerCluster from './MarkerCluster.vue';
import type { Plugin } from "vue";
export declare const ElAmapMarkerCluster: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        points: {
            type: import("vue").PropType<import("@vuemap/amap-jsapi-types/plugins/MarkerClusterer").MarkerClusterData>;
            required: true;
        };
        gridSize: {
            type: NumberConstructor;
        };
        maxZoom: {
            type: NumberConstructor;
        };
        averageCenter: {
            type: BooleanConstructor;
            default: boolean;
        };
        clusterByZoomChange: {
            type: BooleanConstructor;
            default: boolean;
        };
        styles: {
            type: ArrayConstructor;
        };
        renderClusterMarker: {
            type: FunctionConstructor;
        };
        renderMarker: {
            type: FunctionConstructor;
        };
    } & {
        visible: import("../../..").IPropOptions<boolean>;
        zIndex: import("../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
        extraOptions: import("../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        emits: (event: "init", ...args: any[]) => void;
        $amapComponent: AMap.MarkerCluster;
        $$getInstance: () => AMap.MarkerCluster;
        parentInstance: import("../../..").IProvideType | undefined;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        points: {
            type: import("vue").PropType<import("@vuemap/amap-jsapi-types/plugins/MarkerClusterer").MarkerClusterData>;
            required: true;
        };
        gridSize: {
            type: NumberConstructor;
        };
        maxZoom: {
            type: NumberConstructor;
        };
        averageCenter: {
            type: BooleanConstructor;
            default: boolean;
        };
        clusterByZoomChange: {
            type: BooleanConstructor;
            default: boolean;
        };
        styles: {
            type: ArrayConstructor;
        };
        renderClusterMarker: {
            type: FunctionConstructor;
        };
        renderMarker: {
            type: FunctionConstructor;
        };
    } & {
        visible: import("../../..").IPropOptions<boolean>;
        zIndex: import("../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
        extraOptions: import("../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        averageCenter: boolean;
        clusterByZoomChange: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        points: {
            type: import("vue").PropType<import("@vuemap/amap-jsapi-types/plugins/MarkerClusterer").MarkerClusterData>;
            required: true;
        };
        gridSize: {
            type: NumberConstructor;
        };
        maxZoom: {
            type: NumberConstructor;
        };
        averageCenter: {
            type: BooleanConstructor;
            default: boolean;
        };
        clusterByZoomChange: {
            type: BooleanConstructor;
            default: boolean;
        };
        styles: {
            type: ArrayConstructor;
        };
        renderClusterMarker: {
            type: FunctionConstructor;
        };
        renderMarker: {
            type: FunctionConstructor;
        };
    } & {
        visible: import("../../..").IPropOptions<boolean>;
        zIndex: import("../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
        extraOptions: import("../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        emits: (event: "init", ...args: any[]) => void;
        $amapComponent: AMap.MarkerCluster;
        $$getInstance: () => AMap.MarkerCluster;
        parentInstance: import("../../..").IProvideType | undefined;
    }, {}, {}, {}, {
        averageCenter: boolean;
        clusterByZoomChange: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    points: {
        type: import("vue").PropType<import("@vuemap/amap-jsapi-types/plugins/MarkerClusterer").MarkerClusterData>;
        required: true;
    };
    gridSize: {
        type: NumberConstructor;
    };
    maxZoom: {
        type: NumberConstructor;
    };
    averageCenter: {
        type: BooleanConstructor;
        default: boolean;
    };
    clusterByZoomChange: {
        type: BooleanConstructor;
        default: boolean;
    };
    styles: {
        type: ArrayConstructor;
    };
    renderClusterMarker: {
        type: FunctionConstructor;
    };
    renderMarker: {
        type: FunctionConstructor;
    };
} & {
    visible: import("../../..").IPropOptions<boolean>;
    zIndex: import("../../..").IPropOptions<number>;
    reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
    extraOptions: import("../../..").IPropOptions<any>;
}>> & {
    onInit?: ((...args: any[]) => any) | undefined;
}, {
    emits: (event: "init", ...args: any[]) => void;
    $amapComponent: AMap.MarkerCluster;
    $$getInstance: () => AMap.MarkerCluster;
    parentInstance: import("../../..").IProvideType | undefined;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], "init", {
    averageCenter: boolean;
    clusterByZoomChange: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin<any[]>;
export default ElAmapMarkerCluster;
export declare type ElAmapMarkerClusterInstance = InstanceType<typeof MarkerCluster>;
