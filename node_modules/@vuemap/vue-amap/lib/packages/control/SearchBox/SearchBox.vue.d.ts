/// <reference types="@vuemap/amap-jsapi-types" />
declare const _default: import("vue").DefineComponent<{
    type: {
        type: StringConstructor;
    };
    city: {
        type: StringConstructor;
    };
    datatype: {
        type: StringConstructor;
    };
    citylimit: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputId: {
        type: StringConstructor;
    };
    inputCustom: {
        type: BooleanConstructor;
        default: boolean;
    };
    outputId: {
        type: StringConstructor;
    };
    outPutDirAuto: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeResultOnScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    lang: {
        type: StringConstructor;
    };
    placeholder: {
        type: StringConstructor;
    };
    debounce: {
        type: NumberConstructor;
        default: number;
    };
} & {
    visible: import("../../../utils").IPropOptions<boolean>;
    zIndex: import("../../../utils").IPropOptions<number>;
    reEventWhenUpdate: import("../../../utils").IPropOptions<boolean>;
    extraOptions: import("../../../utils").IPropOptions<any>;
}, {
    props: import("@vue/shared").LooseRequired<{
        readonly citylimit: boolean;
        readonly inputCustom: boolean;
        readonly outPutDirAuto: boolean;
        readonly closeResultOnScroll: boolean;
        readonly debounce: number;
        readonly visible?: boolean | undefined;
        readonly zIndex?: number | undefined;
        readonly reEventWhenUpdate?: boolean | undefined;
        readonly extraOptions?: any;
        readonly type?: string | undefined;
        readonly city?: string | undefined;
        readonly datatype?: string | undefined;
        readonly inputId?: string | undefined;
        readonly outputId?: string | undefined;
        readonly lang?: string | undefined;
        readonly placeholder?: string | undefined;
        readonly onInit?: ((...args: any[]) => any) | undefined;
    } & {}>;
    emits: (event: "init", ...args: any[]) => void;
    saveInputId: import("vue").Ref<string>;
    saveVisible: import("vue").Ref<boolean>;
    $amapComponent: AMap.Autocomplete;
    preInput: any;
    $$getInstance: () => AMap.Autocomplete;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], "init", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: StringConstructor;
    };
    city: {
        type: StringConstructor;
    };
    datatype: {
        type: StringConstructor;
    };
    citylimit: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputId: {
        type: StringConstructor;
    };
    inputCustom: {
        type: BooleanConstructor;
        default: boolean;
    };
    outputId: {
        type: StringConstructor;
    };
    outPutDirAuto: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeResultOnScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    lang: {
        type: StringConstructor;
    };
    placeholder: {
        type: StringConstructor;
    };
    debounce: {
        type: NumberConstructor;
        default: number;
    };
} & {
    visible: import("../../../utils").IPropOptions<boolean>;
    zIndex: import("../../../utils").IPropOptions<number>;
    reEventWhenUpdate: import("../../../utils").IPropOptions<boolean>;
    extraOptions: import("../../../utils").IPropOptions<any>;
}>> & {
    onInit?: ((...args: any[]) => any) | undefined;
}, {
    citylimit: boolean;
    inputCustom: boolean;
    outPutDirAuto: boolean;
    closeResultOnScroll: boolean;
    debounce: number;
}, {}>;
export default _default;
