'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
require('../../../../mixins/index.js');
require('../../../../utils/index.js');
var buildHelper = require('../../../../utils/buildHelper.js');
var useRegister = require('../../../../mixins/useRegister.js');

var script = /* @__PURE__ */ vue.defineComponent({
  ...{
    name: "ElAmapLayerMapboxVectorTile",
    inheritAttrs: false
  },
  __name: "MapboxVectorTileLayer",
  props: buildHelper.buildProps({
    url: {
      type: String
    },
    // MVT 数据的链接地址
    zooms: {
      type: Array
    },
    // 支持的缩放级别范围，默认范围 [2,22]
    dataZooms: {
      type: Array
    },
    // 瓦片数据等级范围，超过范围会使用最大/最小等级的数据，默认 [2,18]
    opacity: {
      type: Number
    },
    // 透明度，默认 1
    styles: {
      type: Object
    }
    // 样式
  }),
  emits: ["init"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const emits = __emit;
    let $amapComponent;
    const { $$getInstance, parentInstance } = useRegister.useRegister((options, parentComponent) => {
      return new Promise((resolve) => {
        AMap.plugin(["AMap.MapboxVectorTileLayer"], () => {
          $amapComponent = new AMap.MapboxVectorTileLayer(options);
          parentComponent.addLayer($amapComponent);
          resolve($amapComponent);
        });
      });
    }, {
      emits,
      destroyComponent() {
        if ($amapComponent && (parentInstance == null ? void 0 : parentInstance.$amapComponent)) {
          if (!(parentInstance == null ? void 0 : parentInstance.isDestroy)) {
            parentInstance == null ? void 0 : parentInstance.$amapComponent.removeLayer($amapComponent);
          }
          $amapComponent = null;
        }
      }
    });
    __expose({
      $$getInstance
    });
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createElementBlock("div");
    };
  }
});

exports.default = script;
//# sourceMappingURL=MapboxVectorTileLayer.vue2.js.map
