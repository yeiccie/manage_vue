import Tiles3D from './Tiles3D.vue';
import type { Plugin } from "vue";
export declare const ElAmapLayerTiles3d: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        url: {
            type: StringConstructor;
            required: true;
        };
        threeScriptUrl: {
            type: StringConstructor;
            default: string;
        };
        threeGltfLoader: {
            type: StringConstructor;
            default: string;
        };
        layerStyle: {
            type: ObjectConstructor;
        };
    } & {
        visible: import("../../../..").IPropOptions<boolean>;
        zIndex: import("../../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
        extraOptions: import("../../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        emits: (event: "init", ...args: any[]) => void;
        $amapComponent: any;
        $$getInstance: () => any;
        parentInstance: import("../../../..").IProvideType | undefined;
        createLayer: (options: any) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        url: {
            type: StringConstructor;
            required: true;
        };
        threeScriptUrl: {
            type: StringConstructor;
            default: string;
        };
        threeGltfLoader: {
            type: StringConstructor;
            default: string;
        };
        layerStyle: {
            type: ObjectConstructor;
        };
    } & {
        visible: import("../../../..").IPropOptions<boolean>;
        zIndex: import("../../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
        extraOptions: import("../../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        threeScriptUrl: string;
        threeGltfLoader: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        url: {
            type: StringConstructor;
            required: true;
        };
        threeScriptUrl: {
            type: StringConstructor;
            default: string;
        };
        threeGltfLoader: {
            type: StringConstructor;
            default: string;
        };
        layerStyle: {
            type: ObjectConstructor;
        };
    } & {
        visible: import("../../../..").IPropOptions<boolean>;
        zIndex: import("../../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
        extraOptions: import("../../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
    }, {
        emits: (event: "init", ...args: any[]) => void;
        $amapComponent: any;
        $$getInstance: () => any;
        parentInstance: import("../../../..").IProvideType | undefined;
        createLayer: (options: any) => void;
    }, {}, {}, {}, {
        threeScriptUrl: string;
        threeGltfLoader: string;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    url: {
        type: StringConstructor;
        required: true;
    };
    threeScriptUrl: {
        type: StringConstructor;
        default: string;
    };
    threeGltfLoader: {
        type: StringConstructor;
        default: string;
    };
    layerStyle: {
        type: ObjectConstructor;
    };
} & {
    visible: import("../../../..").IPropOptions<boolean>;
    zIndex: import("../../../..").IPropOptions<number>;
    reEventWhenUpdate: import("../../../..").IPropOptions<boolean>;
    extraOptions: import("../../../..").IPropOptions<any>;
}>> & {
    onInit?: ((...args: any[]) => any) | undefined;
}, {
    emits: (event: "init", ...args: any[]) => void;
    $amapComponent: any;
    $$getInstance: () => any;
    parentInstance: import("../../../..").IProvideType | undefined;
    createLayer: (options: any) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], "init", {
    threeScriptUrl: string;
    threeGltfLoader: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin<any[]>;
export default ElAmapLayerTiles3d;
export declare type ElAmapLayerTiles3dInstance = InstanceType<typeof Tiles3D>;
