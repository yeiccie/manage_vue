'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
require('./addProcess.js');
var districtCluster = require('@vuemap/district-cluster');
require('../../../../mixins/index.js');
var buildHelper = require('../../../../utils/buildHelper.js');
var useRegister = require('../../../../mixins/useRegister.js');

var script = /* @__PURE__ */ vue.defineComponent({
  ...{
    name: "ElAmapLayerDistrictCluster",
    inheritAttrs: false
  },
  __name: "DistrictCluster",
  props: buildHelper.buildProps({
    data: {
      required: true,
      type: Array
    },
    // 数据源数组，每个元素即为点相关的信息
    getPosition: {
      type: Function
    },
    // 返回数据项中的经纬度信息
    autoSetFitView: {
      type: Boolean,
      default: true
    },
    // 是否在绘制后自动调整地图视野以适合全部点，默认true
    topAdcodes: {
      type: Array
    },
    // 顶层区划的adcode列表
    excludedAdcodes: {
      type: Array
    },
    renderOptions: {
      type: Object
    }
    // 绘制的引擎的参数
  }),
  emits: ["init"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const emits = __emit;
    let $amapComponent;
    const { $$getInstance } = useRegister.useRegister((options, parentComponent) => {
      return new Promise((resolve) => {
        options.map = parentComponent;
        $amapComponent = new districtCluster.DistrictCluster(options);
        resolve($amapComponent);
      });
    }, {
      emits,
      destroyComponent() {
        if ($amapComponent) {
          $amapComponent.destroy();
          $amapComponent = null;
        }
      }
    });
    __expose({
      $$getInstance
    });
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createElementBlock("div");
    };
  }
});

exports.default = script;
//# sourceMappingURL=DistrictCluster.vue2.js.map
