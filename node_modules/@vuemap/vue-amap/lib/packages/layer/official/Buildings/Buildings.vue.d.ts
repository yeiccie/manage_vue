/// <reference types="@vuemap/amap-jsapi-types" />
import type { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    wallColor: {
        type: (StringConstructor | ArrayConstructor)[];
    };
    roofColor: {
        type: (StringConstructor | ArrayConstructor)[];
    };
    heightFactor: {
        type: NumberConstructor;
    };
    styleOpts: {
        type: PropType<AMap.BuildingStyleOptions>;
    };
    zooms: {
        type: ArrayConstructor;
    };
    opacity: {
        type: NumberConstructor;
    };
} & {
    visible: import("../../../../utils").IPropOptions<boolean>;
    zIndex: import("../../../../utils").IPropOptions<number>;
    reEventWhenUpdate: import("../../../../utils").IPropOptions<boolean>;
    extraOptions: import("../../../../utils").IPropOptions<any>;
}, {
    props: import("@vue/shared").LooseRequired<{
        readonly visible?: boolean | undefined;
        readonly zIndex?: number | undefined;
        readonly reEventWhenUpdate?: boolean | undefined;
        readonly extraOptions?: any;
        readonly zooms?: unknown[] | undefined;
        readonly wallColor?: string | unknown[] | undefined;
        readonly roofColor?: string | unknown[] | undefined;
        readonly opacity?: number | undefined;
        readonly heightFactor?: number | undefined;
        readonly styleOpts?: AMap.BuildingStyleOptions | undefined;
        readonly onInit?: ((...args: any[]) => any) | undefined;
    } & {}>;
    emits: (event: "init", ...args: any[]) => void;
    $amapComponent: AMap.Buildings;
    $$getInstance: () => AMap.Buildings;
    parentInstance: import("../../../../mixins").IProvideType | undefined;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "init"[], "init", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    wallColor: {
        type: (StringConstructor | ArrayConstructor)[];
    };
    roofColor: {
        type: (StringConstructor | ArrayConstructor)[];
    };
    heightFactor: {
        type: NumberConstructor;
    };
    styleOpts: {
        type: PropType<AMap.BuildingStyleOptions>;
    };
    zooms: {
        type: ArrayConstructor;
    };
    opacity: {
        type: NumberConstructor;
    };
} & {
    visible: import("../../../../utils").IPropOptions<boolean>;
    zIndex: import("../../../../utils").IPropOptions<number>;
    reEventWhenUpdate: import("../../../../utils").IPropOptions<boolean>;
    extraOptions: import("../../../../utils").IPropOptions<any>;
}>> & {
    onInit?: ((...args: any[]) => any) | undefined;
}, {}, {}>;
export default _default;
