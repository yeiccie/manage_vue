/// <reference types="@vuemap/amap-jsapi-types" />
import InfoWindow from './InfoWindow.vue';
import type { Plugin } from "vue";
export declare const ElAmapInfoWindow: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        isCustom: {
            type: BooleanConstructor;
            default: boolean;
        };
        autoMove: {
            type: BooleanConstructor;
            default: boolean;
        };
        avoid: {
            type: ArrayConstructor;
        };
        closeWhenClickMap: {
            type: BooleanConstructor;
            default: boolean;
        };
        content: {
            type: import("vue").PropType<string | HTMLDivElement>;
        };
        size: {
            type: ArrayConstructor;
        };
        anchor: {
            type: StringConstructor;
        };
        offset: {
            type: ArrayConstructor;
        };
        position: {
            type: import("vue").PropType<[number, number]>;
        };
    } & {
        visible: import("../../..").IPropOptions<boolean>;
        zIndex: import("../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
        extraOptions: import("../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
        "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    }, {
        props: import("@vue/shared").LooseRequired<{
            readonly autoMove: boolean;
            readonly isCustom: boolean;
            readonly closeWhenClickMap: boolean;
            readonly visible?: boolean | undefined;
            readonly zIndex?: number | undefined;
            readonly reEventWhenUpdate?: boolean | undefined;
            readonly extraOptions?: any;
            readonly position?: [number, number] | undefined;
            readonly offset?: unknown[] | undefined;
            readonly avoid?: unknown[] | undefined;
            readonly content?: string | HTMLDivElement | undefined;
            readonly size?: unknown[] | undefined;
            readonly anchor?: string | undefined;
            readonly onInit?: ((...args: any[]) => any) | undefined;
            readonly "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
        } & {}>;
        emits: (event: "init" | "update:visible", ...args: any[]) => void;
        needTeleport: boolean;
        tempId: string;
        divId: import("vue").Ref<string>;
        $amapComponent: AMap.InfoWindow;
        $$getInstance: () => AMap.InfoWindow;
        parentInstance: import("../../..").IProvideType | undefined;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("init" | "update:visible")[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        isCustom: {
            type: BooleanConstructor;
            default: boolean;
        };
        autoMove: {
            type: BooleanConstructor;
            default: boolean;
        };
        avoid: {
            type: ArrayConstructor;
        };
        closeWhenClickMap: {
            type: BooleanConstructor;
            default: boolean;
        };
        content: {
            type: import("vue").PropType<string | HTMLDivElement>;
        };
        size: {
            type: ArrayConstructor;
        };
        anchor: {
            type: StringConstructor;
        };
        offset: {
            type: ArrayConstructor;
        };
        position: {
            type: import("vue").PropType<[number, number]>;
        };
    } & {
        visible: import("../../..").IPropOptions<boolean>;
        zIndex: import("../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
        extraOptions: import("../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
        "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    }, {
        autoMove: boolean;
        isCustom: boolean;
        closeWhenClickMap: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        isCustom: {
            type: BooleanConstructor;
            default: boolean;
        };
        autoMove: {
            type: BooleanConstructor;
            default: boolean;
        };
        avoid: {
            type: ArrayConstructor;
        };
        closeWhenClickMap: {
            type: BooleanConstructor;
            default: boolean;
        };
        content: {
            type: import("vue").PropType<string | HTMLDivElement>;
        };
        size: {
            type: ArrayConstructor;
        };
        anchor: {
            type: StringConstructor;
        };
        offset: {
            type: ArrayConstructor;
        };
        position: {
            type: import("vue").PropType<[number, number]>;
        };
    } & {
        visible: import("../../..").IPropOptions<boolean>;
        zIndex: import("../../..").IPropOptions<number>;
        reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
        extraOptions: import("../../..").IPropOptions<any>;
    }>> & {
        onInit?: ((...args: any[]) => any) | undefined;
        "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    }, {
        props: import("@vue/shared").LooseRequired<{
            readonly autoMove: boolean;
            readonly isCustom: boolean;
            readonly closeWhenClickMap: boolean;
            readonly visible?: boolean | undefined;
            readonly zIndex?: number | undefined;
            readonly reEventWhenUpdate?: boolean | undefined;
            readonly extraOptions?: any;
            readonly position?: [number, number] | undefined;
            readonly offset?: unknown[] | undefined;
            readonly avoid?: unknown[] | undefined;
            readonly content?: string | HTMLDivElement | undefined;
            readonly size?: unknown[] | undefined;
            readonly anchor?: string | undefined;
            readonly onInit?: ((...args: any[]) => any) | undefined;
            readonly "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
        } & {}>;
        emits: (event: "init" | "update:visible", ...args: any[]) => void;
        needTeleport: boolean;
        tempId: string;
        divId: import("vue").Ref<string>;
        $amapComponent: AMap.InfoWindow;
        $$getInstance: () => AMap.InfoWindow;
        parentInstance: import("../../..").IProvideType | undefined;
    }, {}, {}, {}, {
        autoMove: boolean;
        isCustom: boolean;
        closeWhenClickMap: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    isCustom: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoMove: {
        type: BooleanConstructor;
        default: boolean;
    };
    avoid: {
        type: ArrayConstructor;
    };
    closeWhenClickMap: {
        type: BooleanConstructor;
        default: boolean;
    };
    content: {
        type: import("vue").PropType<string | HTMLDivElement>;
    };
    size: {
        type: ArrayConstructor;
    };
    anchor: {
        type: StringConstructor;
    };
    offset: {
        type: ArrayConstructor;
    };
    position: {
        type: import("vue").PropType<[number, number]>;
    };
} & {
    visible: import("../../..").IPropOptions<boolean>;
    zIndex: import("../../..").IPropOptions<number>;
    reEventWhenUpdate: import("../../..").IPropOptions<boolean>;
    extraOptions: import("../../..").IPropOptions<any>;
}>> & {
    onInit?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
}, {
    props: import("@vue/shared").LooseRequired<{
        readonly autoMove: boolean;
        readonly isCustom: boolean;
        readonly closeWhenClickMap: boolean;
        readonly visible?: boolean | undefined;
        readonly zIndex?: number | undefined;
        readonly reEventWhenUpdate?: boolean | undefined;
        readonly extraOptions?: any;
        readonly position?: [number, number] | undefined;
        readonly offset?: unknown[] | undefined;
        readonly avoid?: unknown[] | undefined;
        readonly content?: string | HTMLDivElement | undefined;
        readonly size?: unknown[] | undefined;
        readonly anchor?: string | undefined;
        readonly onInit?: ((...args: any[]) => any) | undefined;
        readonly "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    } & {}>;
    emits: (event: "init" | "update:visible", ...args: any[]) => void;
    needTeleport: boolean;
    tempId: string;
    divId: import("vue").Ref<string>;
    $amapComponent: AMap.InfoWindow;
    $$getInstance: () => AMap.InfoWindow;
    parentInstance: import("../../..").IProvideType | undefined;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("init" | "update:visible")[], "init" | "update:visible", {
    autoMove: boolean;
    isCustom: boolean;
    closeWhenClickMap: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin<any[]>;
export default ElAmapInfoWindow;
export declare type ElAmapInfoWindowInstance = InstanceType<typeof InfoWindow>;
