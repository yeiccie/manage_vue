export default class AreaNode {
    adcode?: any;
    _data?: any;
    _sqScaleFactor?: any;
    _opts?: any;
    _sqNearTolerance?: any;
    constructor(adcode: any, data: any, opts: any);
    static getPropsOfFeature(f: any): any;
    static getAdcodeOfFeature(f: any): any;
    static doesFeatureHasChildren(f: any): boolean;
    setNearTolerance(t: any): void;
    getIdealZoom(): any;
    _getEmptySubFeatureGroupItem(idx: any): {
        subFeatureIndex: any;
        subFeature: null;
        pointsIndexes: never[];
        points: never[];
    };
    groupByPosition(points: any, getPosition: any): any[];
    getLocatedSubFeatureIndex(lngLat: any): any;
    getSubFeatureByIndex(fIdx: any): null;
    _getLocatedSubFeatureIndexByPixel(pixel: any): any;
    _calcNearestFeatureIndexOfSList(pixel: any, list: any): number;
    _calcLocatedFeatureIndexOfSList(pixel: any, list: any): any;
    pixelToLngLat(x: any, y: any): number[];
    lngLatToPixel(lngLat: any): number[];
    _convertRingCoordsToLngLats(ring: any): any[];
    _convertPolygonCoordsToLngLats(poly: any): any[];
    _convertMultiPolygonCoordsToLngLats(polys: any): any[];
    _convertCoordsToLngLats(type: any, coordinates: any): any[];
    _createLngLatFeature(f: any, extraProps?: any): any;
    getAdcode(): any;
    getName(): any;
    getChildrenNum(): any;
    getProps(key: any): any;
    getParentFeature(): any;
    getParentFeatureInPixel(): any;
    getSubFeatures(): never[];
    getSubFeaturesInPixel(): never[];
    getBounds(): any;
}
